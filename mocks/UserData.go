// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	multipart "mime/multipart"

	mock "github.com/stretchr/testify/mock"

	user "BE-REPO-20/features/user"
)

// UserData is an autogenerated mock type for the UserDataInterface type
type UserData struct {
	mock.Mock
}

// Delete provides a mock function with given fields: id
func (_m *UserData) Delete(id int) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SelectShop provides a mock function with given fields: id
func (_m *UserData) SelectShop(id int) (*user.UserCore, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for SelectShop")
	}

	var r0 *user.UserCore
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*user.UserCore, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *user.UserCore); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.UserCore)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectUser provides a mock function with given fields: id
func (_m *UserData) SelectUser(id int) (*user.UserCore, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for SelectUser")
	}

	var r0 *user.UserCore
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*user.UserCore, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *user.UserCore); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.UserCore)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateShop provides a mock function with given fields: id, input, file, nameFile
func (_m *UserData) UpdateShop(id int, input user.UserCore, file multipart.File, nameFile string) error {
	ret := _m.Called(id, input, file, nameFile)

	if len(ret) == 0 {
		panic("no return value specified for UpdateShop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, user.UserCore, multipart.File, string) error); ok {
		r0 = rf(id, input, file, nameFile)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUser provides a mock function with given fields: id, input, file, nameFile
func (_m *UserData) UpdateUser(id int, input user.UserCore, file multipart.File, nameFile string) error {
	ret := _m.Called(id, input, file, nameFile)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, user.UserCore, multipart.File, string) error); ok {
		r0 = rf(id, input, file, nameFile)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUserData creates a new instance of UserData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserData(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserData {
	mock := &UserData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
