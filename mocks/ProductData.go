// Code generated by mockery v2.39.2. DO NOT EDIT.

package mocks

import (
	multipart "mime/multipart"

	mock "github.com/stretchr/testify/mock"

	product "BE-REPO-20/features/product"
)

// ProductData is an autogenerated mock type for the ProductDataInterface type
type ProductData struct {
	mock.Mock
}

// CreateProduct provides a mock function with given fields: userId, input
func (_m *ProductData) CreateProduct(userId int, input product.ProductCore) error {
	ret := _m.Called(userId, input)

	if len(ret) == 0 {
		panic("no return value specified for CreateProduct")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, product.ProductCore) error); ok {
		r0 = rf(userId, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateProductImage provides a mock function with given fields: file, input, nameFile, id
func (_m *ProductData) CreateProductImage(file multipart.File, input product.ProductImageCore, nameFile string, id int) error {
	ret := _m.Called(file, input, nameFile, id)

	if len(ret) == 0 {
		panic("no return value specified for CreateProductImage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(multipart.File, product.ProductImageCore, string, int) error); ok {
		r0 = rf(file, input, nameFile, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteProductById provides a mock function with given fields: userId, id
func (_m *ProductData) DeleteProductById(userId int, id int) error {
	ret := _m.Called(userId, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProductById")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(userId, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteProductImageById provides a mock function with given fields: userId, productId, idImage
func (_m *ProductData) DeleteProductImageById(userId int, productId int, idImage int) error {
	ret := _m.Called(userId, productId, idImage)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProductImageById")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int, int) error); ok {
		r0 = rf(userId, productId, idImage)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListProductPenjualan provides a mock function with given fields: offset, limit, userId
func (_m *ProductData) ListProductPenjualan(offset int, limit int, userId uint) ([]product.ProductCore, error) {
	ret := _m.Called(offset, limit, userId)

	if len(ret) == 0 {
		panic("no return value specified for ListProductPenjualan")
	}

	var r0 []product.ProductCore
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int, uint) ([]product.ProductCore, error)); ok {
		return rf(offset, limit, userId)
	}
	if rf, ok := ret.Get(0).(func(int, int, uint) []product.ProductCore); ok {
		r0 = rf(offset, limit, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]product.ProductCore)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, uint) error); ok {
		r1 = rf(offset, limit, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchProductByQuery provides a mock function with given fields: query, offset, limit
func (_m *ProductData) SearchProductByQuery(query string, offset int, limit int) ([]product.ProductCore, error) {
	ret := _m.Called(query, offset, limit)

	if len(ret) == 0 {
		panic("no return value specified for SearchProductByQuery")
	}

	var r0 []product.ProductCore
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int, int) ([]product.ProductCore, error)); ok {
		return rf(query, offset, limit)
	}
	if rf, ok := ret.Get(0).(func(string, int, int) []product.ProductCore); ok {
		r0 = rf(query, offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]product.ProductCore)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int, int) error); ok {
		r1 = rf(query, offset, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectAllProduct provides a mock function with given fields: offset, limit
func (_m *ProductData) SelectAllProduct(offset int, limit int) ([]product.ProductCore, error) {
	ret := _m.Called(offset, limit)

	if len(ret) == 0 {
		panic("no return value specified for SelectAllProduct")
	}

	var r0 []product.ProductCore
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) ([]product.ProductCore, error)); ok {
		return rf(offset, limit)
	}
	if rf, ok := ret.Get(0).(func(int, int) []product.ProductCore); ok {
		r0 = rf(offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]product.ProductCore)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(offset, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectProductById provides a mock function with given fields: userId, id
func (_m *ProductData) SelectProductById(userId int, id int) (*product.ProductCore, error) {
	ret := _m.Called(userId, id)

	if len(ret) == 0 {
		panic("no return value specified for SelectProductById")
	}

	var r0 *product.ProductCore
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) (*product.ProductCore, error)); ok {
		return rf(userId, id)
	}
	if rf, ok := ret.Get(0).(func(int, int) *product.ProductCore); ok {
		r0 = rf(userId, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product.ProductCore)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(userId, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProductById provides a mock function with given fields: userId, id, input
func (_m *ProductData) UpdateProductById(userId int, id int, input product.ProductCore) error {
	ret := _m.Called(userId, id, input)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProductById")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int, product.ProductCore) error); ok {
		r0 = rf(userId, id, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewProductData creates a new instance of ProductData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProductData(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProductData {
	mock := &ProductData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
