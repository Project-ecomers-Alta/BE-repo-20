// Code generated by mockery v2.39.2. DO NOT EDIT.

package mocks

import (
	auth "BE-REPO-20/features/auth"

	mock "github.com/stretchr/testify/mock"
)

// AuthCore is an autogenerated mock type for the AuthDataInterface type
type AuthCore struct {
	mock.Mock
}

// CheckPassword provides a mock function with given fields: savedPassword, inputPassword
func (_m *AuthCore) CheckPassword(savedPassword string, inputPassword string) bool {
	ret := _m.Called(savedPassword, inputPassword)

	if len(ret) == 0 {
		panic("no return value specified for CheckPassword")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(savedPassword, inputPassword)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Login provides a mock function with given fields: email, password
func (_m *AuthCore) Login(email string, password string) (*auth.AuthCore, error) {
	ret := _m.Called(email, password)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 *auth.AuthCore
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*auth.AuthCore, error)); ok {
		return rf(email, password)
	}
	if rf, ok := ret.Get(0).(func(string, string) *auth.AuthCore); ok {
		r0 = rf(email, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.AuthCore)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: input
func (_m *AuthCore) Register(input auth.AuthCore) (*auth.AuthCore, string, error) {
	ret := _m.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 *auth.AuthCore
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(auth.AuthCore) (*auth.AuthCore, string, error)); ok {
		return rf(input)
	}
	if rf, ok := ret.Get(0).(func(auth.AuthCore) *auth.AuthCore); ok {
		r0 = rf(input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.AuthCore)
		}
	}

	if rf, ok := ret.Get(1).(func(auth.AuthCore) string); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(auth.AuthCore) error); ok {
		r2 = rf(input)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdatePassword provides a mock function with given fields: id, input
func (_m *AuthCore) UpdatePassword(id uint, input auth.AuthCorePassword) error {
	ret := _m.Called(id, input)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePassword")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, auth.AuthCorePassword) error); ok {
		r0 = rf(id, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewAuthCore creates a new instance of AuthCore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthCore(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthCore {
	mock := &AuthCore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
