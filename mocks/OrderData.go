// Code generated by mockery v2.39.2. DO NOT EDIT.

package mocks

import (
	order "BE-REPO-20/features/order"

	mock "github.com/stretchr/testify/mock"
)

// OrderData is an autogenerated mock type for the OrderDataInterface type
type OrderData struct {
	mock.Mock
}

// CancelOrder provides a mock function with given fields: userId, orderId, orderCore
func (_m *OrderData) CancelOrder(userId int, orderId string, orderCore order.OrderCore) error {
	ret := _m.Called(userId, orderId, orderCore)

	if len(ret) == 0 {
		panic("no return value specified for CancelOrder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, string, order.OrderCore) error); ok {
		r0 = rf(userId, orderId, orderCore)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetOrder provides a mock function with given fields: userId
func (_m *OrderData) GetOrder(userId uint) (*order.OrderCore, error) {
	ret := _m.Called(userId)

	if len(ret) == 0 {
		panic("no return value specified for GetOrder")
	}

	var r0 *order.OrderCore
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*order.OrderCore, error)); ok {
		return rf(userId)
	}
	if rf, ok := ret.Get(0).(func(uint) *order.OrderCore); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*order.OrderCore)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrders provides a mock function with given fields: userId
func (_m *OrderData) GetOrders(userId uint) ([]order.OrderCore, error) {
	ret := _m.Called(userId)

	if len(ret) == 0 {
		panic("no return value specified for GetOrders")
	}

	var r0 []order.OrderCore
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) ([]order.OrderCore, error)); ok {
		return rf(userId)
	}
	if rf, ok := ret.Get(0).(func(uint) []order.OrderCore); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]order.OrderCore)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostOrder provides a mock function with given fields: userId, input
func (_m *OrderData) PostOrder(userId uint, input order.OrderCore) (*order.OrderCore, error) {
	ret := _m.Called(userId, input)

	if len(ret) == 0 {
		panic("no return value specified for PostOrder")
	}

	var r0 *order.OrderCore
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, order.OrderCore) (*order.OrderCore, error)); ok {
		return rf(userId, input)
	}
	if rf, ok := ret.Get(0).(func(uint, order.OrderCore) *order.OrderCore); ok {
		r0 = rf(userId, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*order.OrderCore)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, order.OrderCore) error); ok {
		r1 = rf(userId, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WebhoocksData provides a mock function with given fields: webhoocksReq
func (_m *OrderData) WebhoocksData(webhoocksReq order.OrderCore) error {
	ret := _m.Called(webhoocksReq)

	if len(ret) == 0 {
		panic("no return value specified for WebhoocksData")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(order.OrderCore) error); ok {
		r0 = rf(webhoocksReq)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewOrderData creates a new instance of OrderData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrderData(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrderData {
	mock := &OrderData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
