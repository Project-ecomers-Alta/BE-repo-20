// Code generated by mockery v2.39.2. DO NOT EDIT.

package mocks

import (
	admin "BE-REPO-20/features/admin"

	mock "github.com/stretchr/testify/mock"
)

// AdminData is an autogenerated mock type for the AdminDataInterface type
type AdminData struct {
	mock.Mock
}

// GetUserRoleById provides a mock function with given fields: userId
func (_m *AdminData) GetUserRoleById(userId int) (string, error) {
	ret := _m.Called(userId)

	if len(ret) == 0 {
		panic("no return value specified for GetUserRoleById")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (string, error)); ok {
		return rf(userId)
	}
	if rf, ok := ret.Get(0).(func(int) string); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchOrderByQuery provides a mock function with given fields: query
func (_m *AdminData) SearchOrderByQuery(query string) ([]admin.AdminItemOrderCore, error) {
	ret := _m.Called(query)

	if len(ret) == 0 {
		panic("no return value specified for SearchOrderByQuery")
	}

	var r0 []admin.AdminItemOrderCore
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]admin.AdminItemOrderCore, error)); ok {
		return rf(query)
	}
	if rf, ok := ret.Get(0).(func(string) []admin.AdminItemOrderCore); ok {
		r0 = rf(query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]admin.AdminItemOrderCore)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchUserByQuery provides a mock function with given fields: query
func (_m *AdminData) SearchUserByQuery(query string) ([]admin.AdminUserCore, error) {
	ret := _m.Called(query)

	if len(ret) == 0 {
		panic("no return value specified for SearchUserByQuery")
	}

	var r0 []admin.AdminUserCore
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]admin.AdminUserCore, error)); ok {
		return rf(query)
	}
	if rf, ok := ret.Get(0).(func(string) []admin.AdminUserCore); ok {
		r0 = rf(query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]admin.AdminUserCore)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectAllOrder provides a mock function with given fields:
func (_m *AdminData) SelectAllOrder() ([]admin.AdminItemOrderCore, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SelectAllOrder")
	}

	var r0 []admin.AdminItemOrderCore
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]admin.AdminItemOrderCore, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []admin.AdminItemOrderCore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]admin.AdminItemOrderCore)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectAllUser provides a mock function with given fields:
func (_m *AdminData) SelectAllUser() ([]admin.AdminUserCore, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SelectAllUser")
	}

	var r0 []admin.AdminUserCore
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]admin.AdminUserCore, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []admin.AdminUserCore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]admin.AdminUserCore)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAdminData creates a new instance of AdminData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAdminData(t interface {
	mock.TestingT
	Cleanup(func())
}) *AdminData {
	mock := &AdminData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
