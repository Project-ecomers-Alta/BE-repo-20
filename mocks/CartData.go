// Code generated by mockery v2.39.2. DO NOT EDIT.

package mocks

import (
	auth "BE-REPO-20/features/cart"

	mock "github.com/stretchr/testify/mock"
)

// CartData is an autogenerated mock type for the CartDataInterface type
type CartData struct {
	mock.Mock
}

// CreateCart provides a mock function with given fields: input
func (_m *CartData) CreateCart(input auth.CartCore) error {
	ret := _m.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for CreateCart")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(auth.CartCore) error); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteCarts provides a mock function with given fields: ids
func (_m *CartData) DeleteCarts(ids []uint) error {
	ret := _m.Called(ids)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCarts")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]uint) error); ok {
		r0 = rf(ids)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SelectAllCart provides a mock function with given fields: userId
func (_m *CartData) SelectAllCart(userId uint) ([]auth.CartCore, error) {
	ret := _m.Called(userId)

	if len(ret) == 0 {
		panic("no return value specified for SelectAllCart")
	}

	var r0 []auth.CartCore
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) ([]auth.CartCore, error)); ok {
		return rf(userId)
	}
	if rf, ok := ret.Get(0).(func(uint) []auth.CartCore); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]auth.CartCore)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCartData creates a new instance of CartData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCartData(t interface {
	mock.TestingT
	Cleanup(func())
}) *CartData {
	mock := &CartData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
